@model u22524861_HW03.Models.ViewModel
<link rel="stylesheet" href="~/Content/Styling.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>

@{
    ViewBag.Title = "Report";
}

<h2>Report</h2>
<div class="container">

    @* REPORT SECTION *@
    <div class="row">
        <div class="col-md-12 rounded-grid">
            <canvas id="borrowChart" width="400" height="200"></canvas>

            <div>
                <label for="fileName">File Name:</label>
                <input type="text" id="fileName" />

                <label for="fileType">File Type:</label>
                <select id="fileType">
                    <option value="png">PNG</option>
                    <option value="jpeg">JPEG</option>
                    <option value="pdf">PDF</option>
                </select>

                <button id="saveChart" class="btn btn-secondary">Save Chart</button>
            </div>
        </div>

    </div>

    @* ARCHIVE SECTION *@
    <div class="row">
        <div class="col-lg-12 rounded-grid">
            <h3>Document Archive</h3>
            <table class="table">
                <tbody>
                    @foreach (var reportFile in Directory.GetFiles(Server.MapPath("~/Reports")))
                    {
                        var fileName = Path.GetFileName(reportFile);
                        <tr>
                            <td>@fileName</td>

                            <td> <button id="saveChart2" data-file="@fileName" class="btn btn-secondary">Download Chart</button> </td>
                            <td> <button id="deleteReport" class="deleteReport btn btn-secondary" data-file="@fileName">Delete Chart</button> </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    var studentData = @Html.Raw(Json.Encode(Model.borrowList2
        .GroupBy(b => b.studentId)
        .Select(group => new { studentId = group.Key, booksBorrowed = group.Count() })));

    // Fetch student names based on student IDs
    var studentNames = @Html.Raw(Json.Encode(Model.studentList2.ToDictionary(student => student.studentId.ToString(), student => student.name)));

    // Map student IDs to names in the chart data
    var chartLabels = studentData.map(student => studentNames[student.studentId.toString()] || student.studentId);

    // Get the chart canvas
    var ctx = document.getElementById('borrowChart').getContext('2d');

    // Create the chart
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: chartLabels,
            datasets: [{
                label: 'Books Borrowed',
                data: studentData.map(student => student.booksBorrowed),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    suggestedMin: 0,
                    suggestedMax: 30,
                    stepSize: 2
                }
            }
        }
    });

    $("#saveChart").click(function () {
        // Get the file name and type
        var fileName = $("#fileName").val();
        var fileType = $("#fileType").val();

        // Generate the data URL of the chart
        var dataURL = document.getElementById('borrowChart').toDataURL("image/" + fileType);

        // Create a link element and trigger the download
        var link = document.createElement('a');
        link.href = dataURL;
        link.download = fileName + "." + fileType;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        location.reload();
    });

    $("#saveChart2").click(function () {
        var fileName = $(this).data("file");

        // Split the file name into file name and type
        var fileNameParts = fileName.split('.');
        var fileBaseName = fileNameParts[0];
        var fileType = fileNameParts[1];

        // Generate the data URL of the chart
        var dataURL = document.getElementById('borrowChart').toDataURL("image/" + fileType);

        // Create a link element and trigger the download
        var link = document.createElement('a');
        link.href = dataURL;
        link.download = fileName + "." + fileType;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        location.reload();
    });

    $(".deleteReport").click(function () {
        var fileName = $(this).data("file");
        if (confirm("Are you sure you want to delete this report?")) {
            var deleteUrl = '@Url.Action("DeleteReport", "Library")?fileName=' + encodeURIComponent(fileName);
            window.location.href = deleteUrl;
        }
    });
</script>
