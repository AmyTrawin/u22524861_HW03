@using u22524861_HW03.Models
@model u22524861_HW03.Models.ViewModel
@using PagedList.Mvc
@using PagedList
<link href="~/Content/PagedList.css" rel="stylesheet" />
<link rel="stylesheet" href="~/Content/Styling.css" />
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
@{
    ViewBag.Title = "Maintain";
}


<div class="container">
    <div class="row">
        <div class="col-md-6 rounded-grid">
            <h2>Author</h2>
            <button type="button" class="btn btn-light" data-toggle="modal" data-target="#CreateAuthor">Create</button>
            <table class="table">
                <thead>
                    <tr>
                        <th>Author ID</th>
                        <th>Name</th>
                        <th>Surname</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var author in Model.authorList)
                    {
                        <tr>
                            <td>@Html.DisplayFor(model => author.authorId)</td>
                            <td>@Html.DisplayFor(model => author.name)</td>
                            <td>@Html.DisplayFor(model => author.surname)</td>
                            <td><button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#EditAuthor" data-authorid="@author.authorId" data-name="@author.name" data-surname="@author.surname" onclick="openEditAuthor(this)">Edit</button></td>
                            <td><button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#DeleteAuthor" data-authorid="@author.authorId" data-name="@author.name" data-surname="@author.surname" onclick="setDeleteAuthorID($(this).data('authorid'), $(this).data('name'), $(this).data('surname'))">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                Page @(Model.authorList.PageCount < Model.authorList.PageNumber ? 0 : Model.authorList.PageNumber) of @Model.authorList.PageCount
                @Html.PagedListPager(Model.authorList, page => Url.Action("Maintain", new { authorPage = page }))

            </div>
        </div>

        @* TYPE TABLE *@
        <div class="col-md-5 rounded-grid">
            <h2>Types</h2>
            <button type="button" class="btn btn-light" data-toggle="modal" data-target="#CreateType">Create</button>
            <table class="table">
                <thead>
                    <tr>
                        <th>Type ID</th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var type in Model.typeList)
                    {
                        <tr>
                            <td>@Html.DisplayFor(model => type.typeId)</td>
                            <td>@Html.DisplayFor(model => type.name)</td>
                            <td><button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#EditType" data-typeid="@type.typeId" data-name="@type.name" onclick="openEditType(this)">Edit</button></td>
                            <td><button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#DeleteType" data-typeid="@type.typeId" data-name="@type.name" onclick="setDeleteTypeID($(this).data('typeid'), $(this).data('name'))">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                Page @(Model.typeList.PageCount < Model.typeList.PageNumber ? 0 : Model.typeList.PageNumber) of @Model.typeList.PageCount
                @Html.PagedListPager(Model.typeList, page => Url.Action("Maintain", new { typePage = page }))
            </div>
        </div>
    </div>

    @* BORROW TABLE *@
    <div class="row">
        <div class="col-lg-12 rounded-grid">
            <h2>Borrow</h2>
            <button type="button" class="btn btn-light" data-toggle="modal" data-target="#CreateBorrow">Create</button>
            <table class="table">
                <thead>
                    <tr>
                        <th>Borrow ID</th>
                        <th>Student Name</th>
                        <th>Book</th>
                        <th>Taken Date</th>
                        <th>Brought Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var borrow in Model.borrowList)
                    {
                        <tr>
                            <td>@Html.DisplayFor(model => borrow.borrowId)</td>
                            <td>
                                @{
                                    // Find the corresponding student name using LINQ
                                    var student = Model.studentList2?.FirstOrDefault(s => s.studentId == borrow.studentId);
                                    var studentName = student?.name ?? "Student Not Found";

                                    @studentName
                                }
                            </td>
                            <td>
                                @{
                                    // Find the corresponding student name using LINQ
                                    var book = Model.bookList2?.FirstOrDefault(b => b.bookId == borrow.bookId);
                                    var bookName = book?.name ?? "Book Not Found";

                                    @bookName
                                 }
                            </td>
                            <td>@Html.DisplayFor(model => borrow.takenDate)</td>
                            <td>@Html.DisplayFor(model => borrow.broughtDate)</td>
                            <td><button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#EditBorrow" data-borrowid="@borrow.borrowId" data-studentid="@borrow.studentId" data-bookid="@borrow.bookId" onclick="openEditBorrow(this)">Edit</button></td>
                            <td><button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#DeleteBorrow" data-borrowid="@borrow.borrowId" data-studentid="@borrow.studentId" data-bookid="@borrow.bookId" onclick="setDeleteBorrowID($(this).data('borrowid'), $(this).data('studentid'))">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                Page @(Model.borrowList.PageCount < Model.borrowList.PageNumber ? 0 : Model.borrowList.PageNumber) of @Model.borrowList.PageCount
                @Html.PagedListPager(Model.borrowList, page => Url.Action("Maintain", new { borrowPage = page }))

            </div>
        </div>
    </div>
</div>

@* CREATE AUTHOR MODAL POPUP *@
<div class="modal fade" id="CreateAuthor" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "authors", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.authorList.FirstOrDefault().name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.authorList.FirstOrDefault().name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.authorList.FirstOrDefault().name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.authorList.FirstOrDefault().surname, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.authorList.FirstOrDefault().surname, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.authorList.FirstOrDefault().surname, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* CREATE TYPE MODAL POPUP *@
<div class="modal fade" id="CreateType" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "types", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.typeList.FirstOrDefault().name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.typeList.FirstOrDefault().name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.typeList.FirstOrDefault().name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* CREATE BORROW MODAL POPUP *@
<div class="modal fade" id="CreateBorrow" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "borrows", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>borrows</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().studentId, "studentId", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("studentId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().studentId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().bookId, "bookId", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("bookId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().bookId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().takenDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.borrowList.FirstOrDefault().takenDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().takenDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().broughtDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.borrowList.FirstOrDefault().broughtDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().broughtDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* EDIT AUTHOR MODAL POPUP *@
<div class="modal fade" id="EditAuthor" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Edit", "authors", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.HiddenFor(model => model.authorList.FirstOrDefault().authorId, new { id = "AuthorId" })
                            @Html.LabelFor(model => model.authorList.FirstOrDefault().name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.authorList.FirstOrDefault().name, new { htmlAttributes = new { @class = "form-control", id = "Name" } })
                                @Html.ValidationMessageFor(model => model.authorList.FirstOrDefault().name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.authorList.FirstOrDefault().surname, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.authorList.FirstOrDefault().surname, new { htmlAttributes = new { @class = "form-control", id = "Surname" } })
                                @Html.ValidationMessageFor(model => model.authorList.FirstOrDefault().surname, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* DELETE AUTHOR MODAL POPUP *@
<div class="modal fade" id="DeleteAuthor" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Delete", "authors", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.Hidden("id", null, new { id = "deleteAuthorId" })
                        <div class="form-group">
                            <h3>Are you sure you want to delete this?</h3>
                            @*<dl class="dl-horizontal">
                                    <dt>
                                        @Html.DisplayNameFor(model => model.authorList.FirstOrDefault().name)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.authorList.FirstOrDefault().name)
                                    </dd>

                                    <dt>
                                        @Html.DisplayNameFor(model => model.authorList.FirstOrDefault().surname)
                                    </dt>

                                    <dd>
                                        @Html.DisplayFor(model => model.authorList.FirstOrDefault().surname)
                                    </dd>

                                </dl>*@
                            <dl class="dl-horizontal">
                                <dt>
                                    Name
                                </dt>
                                <dd id="authorName">
                                </dd>

                                <dt>
                                    Surname
                                </dt>
                                <dd id="authorSurname">
                                </dd>

                            </dl>
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Delete" class="btn btn-danger" />
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* EDIT TYPE MODAL POPUP *@
<div class="modal fade" id="EditType" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Edit", "types", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.HiddenFor(model => model.authorList.FirstOrDefault().authorId, new { id = "AuthorId" })
                            @Html.LabelFor(model => model.authorList.FirstOrDefault().name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.typeList.FirstOrDefault().name, new { htmlAttributes = new { @class = "form-control", id = "Name" } })
                                @Html.ValidationMessageFor(model => model.typeList.FirstOrDefault().name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* DELETE TYPE MODAL POPUP *@
<div class="modal fade" id="DeleteType" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Delete", "types", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.Hidden("id", null, new { id = "deleteTypeId" })
                        <div class="form-group">
                            <h3>Are you sure you want to delete this?</h3>
                            <dl class="dl-horizontal">
                                <dt>
                                    Name
                                </dt>
                                <dd id="typeName"></dd>
                            </dl>
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Delete" class="btn btn-danger" />
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* EDIT BORROW MODAL POPUP *@
<div class="modal fade" id="EditBorrow" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Edit", "borrows", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>Borrow</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.borrowList.FirstOrDefault().borrowId)

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().studentId, "Student", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("studentId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().studentId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().bookId, "Book", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("bookId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().bookId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().takenDate, "Taken Date", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.borrowList.FirstOrDefault().takenDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().takenDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.borrowList.FirstOrDefault().broughtDate, "Brought Date", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.borrowList.FirstOrDefault().broughtDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.borrowList.FirstOrDefault().broughtDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* DELETE BORROW MODAL POPUP *@
<div class="modal fade" id="DeleteBorrow" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Delete", "borrows", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.Hidden("id", null, new { id = "deleteBorrowId" })

                        <div class="form-group">
                            <dl class="dl-horizontal">
                                <dt>
                                    @Html.DisplayNameFor(model => model.borrowList.FirstOrDefault().takenDate)
                                </dt>

                                <dd>
                                    @Html.DisplayFor(model => model.borrowList.FirstOrDefault().takenDate)
                                </dd>

                                <dt>
                                    @Html.DisplayNameFor(model => model.borrowList.FirstOrDefault().broughtDate)
                                </dt>

                                <dd>
                                    @Html.DisplayFor(model => model.borrowList.FirstOrDefault().broughtDate)
                                </dd>

                                <dt>
                                    Student
                                </dt>

                                <dd id="borrowStudent">
                                </dd>

                                <dt>
                                    Book
                                </dt>

                                <dd id="borrowBook">
                                </dd>
                            </dl>
                        </div>

                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Delete" class="btn btn-danger" />
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<script>
    function setDeleteAuthorID(authorId, name, surname) {
        $('#deleteAuthorId').val(authorId);
        $('#authorName').text(name);
        $('#authorSurname').text(surname);
    }

    function setDeleteTypeID(typeId, name) {
        $('#deleteTypeId').val(typeId);
        $('#typeName').text(name);
    }

    function setDeleteBorrowID(borrowId, student, book) {
        $('#deleteBorrowId').val(borrowId);
        $('#borrowStudent').text(student);
        $('#borrowBook').text(book);
    }

    function openEditAuthor(button) {
        var authorId = $(button).data('authorid');
        var name = $(button).data('name');
        var surname = $(button).data('surname');

        // Populate the modal fields
        $('#EditAuthor #AuthorId').val(authorId);
        $('#EditAuthor #Name').val(name);
        $('#EditAuthor #Surname').val(surname);

        // Open the modal
        $('#EditAuthor').modal('show');
    }

    function openEditType(button) {
        var typeId = $(button).data('typeid');
        var name = $(button).data('name');

        // Populate the modal fields
        $('#EditType #TypeId').val(typeId);
        $('#EditType #Name').val(name);

        // Open the modal
        $('#EditType').modal('show');
    }

    function openEditBorrow(button) {
        var borrowId = $(button).data('borrowid');
        var studentId = $(button).data('studentid');
        var bookId = $(button).data('bookid');

        // Populate the modal fields
        $('#EditBorrow #borrowId').val(borrowId);
        $('#EditBorrow #studentId').val(studentId);
        $('#EditBorrow #bookId').val(bookId);

        // Open the modal
        $('#EditBorrow').modal('show');
    }

</script>
